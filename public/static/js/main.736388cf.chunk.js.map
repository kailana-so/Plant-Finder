{"version":3,"sources":["Nav.js","ImageCard.js","ImageSearch.js","MapContainer.js","SlideUp.js","PlantSearch.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","className","to","axios","require","PlantCard","props","useState","setLocation","result","plant_name","plant_details","common_names","join","wiki_description","value","taxonomy","class","structured_name","genus","species","probability","toFixed","src","similar_images","url","alt","onClick","console","log","navigator","geolocation","getCurrentPosition","position","coords","location","lat","latitude","lng","longitude","post","ImageSearch","searchResults","setSearchResults","message","setMessage","useEffect","setTimeout","type","promises","document","querySelector","files","map","file","Promise","resolve","reject","reader","FileReader","onload","event","res","target","readAsDataURL","all","then","base64files","data","images","fetch","method","headers","body","JSON","stringify","response","json","results","suggestions","catch","error","undefined","length","idx","id","MapContainer","state","markers","showingInfoWindow","activeMarker","selectedName","selectedImg","selectedDescription","componentDidMount","get","setState","displayMarkers","marker","onMarkerClick","plant","description","image_url","this","google","zoom","style","width","height","margin","initialCenter","visible","Component","GoogleApiWrapper","apiKey","process","SlideUp","displayModal","setDisplayModal","PlantSearch","input","setInput","onChange","e","preventDefault","content","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.736388cf.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\nimport './Nav.css'\nimport ImageSearchRoundedIcon from '@material-ui/icons/ImageSearchRounded'\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded'\n// import AddRoundedIcon from '@material-ui/icons/AddRounded'\n// import MenuRoundedIcon from '@material-ui/icons/MenuRounded'\n\n// nav goes to upload and menu of search - text input, about, yours\n\nexport default function Nav() {\n\n    // make an API request to the back end?\n\n    return (\n        <nav className=\"nav\">\n            <Link to=\"/image-search\">\n                <ImageSearchRoundedIcon />\n            </Link>\n\n            \n            <h1><Link to=\"/\">GenusGenius</Link></h1>\n            \n            {/* link to menu with txt search, about and user details */}\n            <Link to=\"/plant-search\">\n                <SearchRoundedIcon />\n            </Link>\n        </nav>\n        \n    )\n}","import './ImageCard.css'\nimport { useState } from 'react'\nconst axios = require('axios')\n\nexport default function PlantCard(props) {\n    // console.log(props)\n\n    const [ searchResults, setSearchResults ] = useState(props)\n    const [ location, setLocation ] = useState()\n\n\n    const handleInsertToDb = () => {\n        console.log('button clicked')\n        // console.log(searchResults)\n        // console.log(location)\n        // console.log(props.result.plant_name)\n        \n        navigator.geolocation.getCurrentPosition(\n            (position) => {\n                console.log(position.coords)\n                const location = {\n                    lat:position.coords.latitude, \n                    lng:position.coords.longitude\n                }\n                axios.post('/api/plants', { \n                    props, location\n                })\n                setLocation({\n                    lat:position.coords.latitude, \n                    lng:position.coords.longitude\n                })\n            }\n\t\t)\n    \n    }\n    // const getUserLocation = () => { /// this is a custom obj so to work with it pull out the data and store it first\n    //     navigator.geolocation.getCurrentPosition(\n    //         (position) => {\n    //             setLocation({\n    //                     lat:[position.coords.latitude], \n    //                     lng:[position.coords.longitude]\n    //             })\n    //         }\n\t// \t)\n    // //     setTimeout(handleInsertToDb, 8000)\n    // }\n\n    return (\n        <section className=\"image-card\">\n            <div>\n                <h2>{props.result.plant_name}</h2>\n                <h5>Common Names:</h5>\n                <p>{props.result.plant_details.common_names === null \n                    ? \"No common names found\" \n                    : props.result.plant_details.common_names.join(', ')} </p>\n            </div>\n\n            <h5>Description:</h5>\n            <p> {props.result.plant_details.wiki_description === null ? \"This plant has no info\" : props.result.plant_details.wiki_description.value}</p>\n\n            <h5>Taxonomy</h5>\n            <p>Class: {props.result.plant_details.taxonomy.class} </p>\n            <p>Genus: {props.result.plant_details.structured_name.genus}</p>\n            <p>Species: {props.result.plant_details.structured_name.species}</p>\n\n            <h5>Match:</h5>\n            <p>{(props.result.probability * 100).toFixed(2)}% </p>\n            <h5>More images: </h5>\n            <section className=\"image-wrapper\">\n                <img src={props.result.similar_images[0].url} alt=\"\"/>\n                <img src={props.result.similar_images[1].url} alt=\"\"/>\n            </section>\n\n            {/* when the user list the marking grab the geo location */}\n            <button onClick={handleInsertToDb}> mark as a sighting</button>\n            {/* <p>{location === undefined \n            ? \"loading location\" \n            : location.lat[0] + \"and\" + location.lng[1]}</p> */}\n        </section>\n    )\n}","import './ImageSearch.css'\nimport { useState, useEffect } from 'react'\nimport ImageCard from './ImageCard.js'\n\nexport default function ImageSearch() {\n\n    // create a useState component to hold the file temp - not needed right tbh\n    // const [selectedFile, setSelectedFile] = useState(null)\n    // console.log(selectedFile)\n\n    // create a useState component to hold the results!\n    const [searchResults, setSearchResults] = useState()\n\n    const [message, setMessage] = useState('Hi there!');\n\n    useEffect(() => {\n        console.log('trigger use effect hook');\n\n        setTimeout(() => {\n        setMessage(\"Upload an image and I\\'ll try ID it\");\n        }, 2000)\n\n    })\n    \n    const handleSendIdentification = () => {\n\n        console.log('click works!')\n        const files = [...document.querySelector('input[type=file]').files]\n        const promises = files.map((file) => {\n            return new Promise((resolve, reject) => {\n                const reader = new FileReader();\n                reader.onload = (event) => {\n                    const res = event.target.result;\n                    // console.log(res);\n                    resolve(res)\n                }\n                reader.readAsDataURL(file)\n            })\n        })\n        console.log('promises made...')\n\n        Promise.all(promises).then((base64files) => {\n            // console.log(base64files)\n            const data = {\n                images: base64files,\n                }\n            fetch('/api/image-search', { // this is where the client send the data to your server which makes the post req to the api\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data), // this is the envelope that contains the body\n            }) \n            .then(response => response.json()) \n            .then(data => { //this is where the data comes back to the client\n                // console.log('Success:', data)\n                // console.log(data)\n                const results = data.suggestions\n                // console.log(results)\n\n                // save the results to use then as a value in you component\n                setSearchResults(results)\n\n            })\n            .catch((error) => {\n                console.error('Error:', error)\n                })\n        })\n    }\n\n    // console.log(searchResults)\n\n    // remove search function once you diplay the results\n    return (\n\n        <section className=\"image-search\">\n            {message}\n            <form className=\"image-search-form\">\n            <div>\n                <input type=\"file\"/>\n                <button className=\"search-btn\" type=\"button\" onClick={handleSendIdentification} >search</button>\n            </div>\n            </form>\n            <h5> {searchResults === undefined ? \"\" : `Showing ${searchResults.length} matches`}  </h5>\n\n            {/* INDIVIDUAL PLANT COMPONENTS */}\n            {/* show number of results searchResults.length  */}\n\n            {/* if the the array is undefined display \"please wait\" else display the items */}\n            {searchResults === undefined \n            ? \"\"\n            : searchResults.map((result, idx) => ( <ImageCard className=\"card\" result={result} id={idx} key={idx}/> ))\n            }\n        </section>\n    )\n}","import { Component } from 'react';\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport { InfoWindow } from \"google-maps-react\";\n\nconst axios = require('axios')\n\nexport class MapContainer extends Component {\n\n    // use state to hold the markers array of objects\n    state = {\n        markers: [], \n        showingInfoWindow: false,\n        activeMarker: {},\n        selectedName: '',\n        selectedImg: '',\n        selectedDescription: '',\n    }\n\n    // making axious call on mount /page load\n    componentDidMount = () => {\n        \n        axios.get('/plants', {\n        }).then(response => {// get back the params as a response\n            // console.log(response)\n            let results = response.data\n            // console.log(results.lat, results.lng, results.plant_name, results.image_url)\n\n            this.setState({\n                markers: results\n            })\n\n            console.log(this.state.markers)\n\n        }) // set the state with the response so you can work with it\n        .catch((error) => {\n            console.error('Error:', error)\n        })\n\n    }\n\n    // transforming marker array of objects into componenet to display on the map\n    displayMarkers = () => {\n        return this.state.markers.map((marker) => {\n    \n            return  <Marker \n                        onClick={this.onMarkerClick}\n                        key={marker.id} \n                        plant={marker.plant_name}\n                        description={marker.description}\n                        url={marker.image_url}\n                        id={marker.id} \n                        position={{ lat: marker.lat, lng: marker.lng}}      \n                    />\n            })\n    }\n    \n    onMarkerClick = (props, marker, id) => {\n        console.log(id)\n        this.setState({\n            selectedName: props.plant,\n            selectedImg: props.url,\n            selectedDescription: props.description,\n            activeMarker: marker,\n            showingInfoWindow: true\n        })\n        console.log(this.state)\n    }\n    \n    render() {\n\n        const style = {\n            width: '80%',\n            height: '75%',\n            margin: '5% 10%',\n        }\n        const imgStyle = {\n            width: '35%',\n        }\n\n        const { selectedName, selectedImg, selectedDescription } = this.state\n        \n        console.log(selectedName)\n\n        return (\n          <Map\n              google={this.props.google}\n              zoom={6}\n              style={style}\n              initialCenter={{ lat: -33.949501, lng: 151.243698 }}\n          >\n            {this.displayMarkers()}\n\n            <InfoWindow\n                marker={this.state.activeMarker}\n                visible={this.state.showingInfoWindow}\n            >\n                <div>\n                    <h3>{selectedName}</h3>\n                    <p>{selectedDescription}</p>\n                    <img src={selectedImg} style={imgStyle} alt={selectedName}/>\n                </div>\n          </InfoWindow>\n        \n         </Map>\n        );\n   }\n}\n\nexport default GoogleApiWrapper({\n  apiKey:process.env.REACT_APP_MAPS_API_KEY\n})(MapContainer)\n","import React, { useState } from \"react\";\nimport \"./SlideUp.css\";\nimport ExpandLessRoundedIcon from '@material-ui/icons/ExpandLessRounded';\n\nexport default function SlideUp() {\n  const [displayModal, setDisplayModal] = useState(false);\n\n  return (\n    <div className=\"slideUpPanel\">\n\n      {/* modal with button */}\n      <div className={`modal ${displayModal ? \"show\" : \"\"}`} onClick={() => setDisplayModal(!displayModal)}> \n        \n        <div><ExpandLessRoundedIcon /></div>\n\n        <div className=\"text\">\n          <p>Some dummy text about the about and the search and something else</p>\n        </div>\n\n      </div>\n      <div\n        className={`overlay ${displayModal ? \"show\" : \"\"}`}\n        onClick={() => setDisplayModal(!displayModal)}\n      />\n\n    </div>\n  );\n}\n\n// const rootElement = document.getElementById(\"root\");\n// ReactDOM.render(<SlideUp />, rootElement);\n","import './PlantSearch.css'\nimport { useState, useEffect } from 'react'\nimport PlantCard from './PlantCard.js'\nconst axios = require('axios')\n\n// this is doing a direct inout search with isn't very good. refactor it to pul all the data dn then process it client side you you can do more natural  queries\n\nexport default function PlantSearch() {\n\n    // create a useState component to hold the input\n    const [input, setInput] = useState('')\n    const [results, setResults] = useState([])\n    console.log(results)\n    \n    const [message, setMessage] = useState('Hi there!');\n\n    useEffect(() => {\n        console.log('trigger use effect hook');\n\n        setTimeout(() => {\n        setMessage(\"Search for a plant and I\\'ll see if we have it\");\n        }, 2000)\n\n        // axios.get('/api/plants', { \n           \n        // })\n        // .then(response => {// get back the params as a response\n        //     // console.log(response)\n        //     let results = response.data\n        //     // console.log(results.plant_name)\n        //     setResults(results)}) // set the state with the response so you can work with it\n        // .catch((error) => {\n        //     console.error('Error:', error)\n        // })\n\n    })\n\n      const handleInput = e => {\n        e.preventDefault()\n\n        setInput({content: e.target.value})\n        console.log(input)\n\n        // console.log('submit')\n        // console.log(input)\n\n        // axios.get('/api/plants', { \n        //     params: { input } // pass in the params\n        // })\n        // .then(response => {// get back the params as a response\n        //     // console.log(response)\n        //     let results = response.data\n        //     // console.log(results.plant_name)\n        //     setResults(results)}) // set the state with the response so you can work with it\n        // .catch((error) => {\n        //     console.error('Error:', error)\n        // })\n    }\n\n    const handleQuery = e => {\n        e.preventDefault()\n\n        console.log('submit')\n        console.log(input)\n    }\n    return (\n\n        <section className=\"plant-search\">\n            {message}\n            <div>\n                <form className=\"plant-search-form\">\n                    <input type=\"text\" onChange={handleInput}/> \n                    <button className=\"search-btn\" type=\"button\" onClick={handleQuery}>search</button>\n                </form>\n\n            </div>\n                <section>\n                    {/* {results.length === 0 ? \"\" : <PlantCard results={results}/> } */}\n\n                </section>\n        </section>\n    )\n}","import { Switch, Route } from 'react-router-dom'\nimport './App.css';\nimport Nav from './Nav.js'\nimport ImageSearch from './ImageSearch.js'\nimport MapContainer from './MapContainer.js'\nimport SlideUp from './SlideUp.js'\nimport PlantSearch from './PlantSearch';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <Nav /> {/* nav - search text search upload nav holds the icons and switch below fakes the routes*/}\n      <Switch>\n        \n        <Route path=\"/image-search\">\n          <ImageSearch />\n        </Route>\n        <Route exact path=\"/\">\n          <MapContainer />\n        </Route>\n        <Route exact path=\"/plant-search\">\n          <PlantSearch />\n        </Route>\n\n      </Switch>\n      {/* MAP */}\n      {/* ImageSearch - pull out and in nav once your setting up you browser routes */}\n      {/* <Search /> */}\n\n      {/* menu links and app switches routes */}\n      <SlideUp />\n    </div>\n  );\n\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n\n      <Router>\n        <App />\n      </Router>\n      \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}