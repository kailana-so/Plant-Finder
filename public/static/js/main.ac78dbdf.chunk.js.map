{"version":3,"sources":["Nav.js","ImageCard.js","ImageSearch.js","MapContainer.js","SlideUp.js","PlantCard.js","PlantSearch.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","className","to","axios","require","PlantCard","props","useState","open","state","setState","location","setLocation","console","log","result","plant_name","plant_details","common_names","join","wiki_description","value","taxonomy","class","structured_name","genus","species","probability","toFixed","src","similar_images","url","alt","Button","onClick","Confirm","cancelButton","confirmButton","onCancel","onConfirm","id","navigator","geolocation","getCurrentPosition","position","coords","lat","latitude","lng","longitude","post","ImageSearch","searchResults","setSearchResults","message","setMessage","useEffect","setTimeout","type","promises","document","querySelector","files","map","file","Promise","resolve","reject","reader","FileReader","onload","event","res","target","readAsDataURL","all","then","base64files","data","images","fetch","method","headers","body","JSON","stringify","response","json","results","suggestions","catch","error","undefined","length","idx","MapContainer","markers","showingInfoWindow","activeMarker","selectedName","selectedImg","selectedDescription","componentDidMount","get","displayMarkers","marker","onMarkerClick","plant","description","image_url","this","google","zoom","style","width","height","margin","initialCenter","visible","Component","GoogleApiWrapper","apiKey","process","SlideUp","displayModal","setDisplayModal","common_name","keyword_extractor","PlantSearch","input","setInput","dbResults","setDbResults","matches","setMatches","keywords","onChange","e","preventDefault","content","cols","rows","extraction_result","extract","language","remove_digits","return_changed_case","remove_duplicates","forEach","dbresult","plantDesciption","toLowerCase","RegExp","test","push","match","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ac78dbdf.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\nimport './Nav.css'\nimport ImageSearchRoundedIcon from '@material-ui/icons/ImageSearchRounded'\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded'\n// import AddRoundedIcon from '@material-ui/icons/AddRounded'\n// import MenuRoundedIcon from '@material-ui/icons/MenuRounded'\n\n// nav goes to upload and menu of search - text input, about, yours\n\nexport default function Nav() {\n\n    // make an API request to the back end?\n\n    return (\n        <nav className=\"nav\">\n            <Link to=\"/image-search\">\n                <ImageSearchRoundedIcon />\n            </Link>\n\n            \n            <h1><Link to=\"/\">GenusGenius</Link></h1>\n            \n            {/* link to menu with txt search, about and user details */}\n            <Link to=\"/plant-search\">\n                <SearchRoundedIcon />\n            </Link>\n        </nav>\n        \n    )\n}","import './ImageCard.css'\nimport { useState } from 'react'\nimport { Button, Confirm } from \"semantic-ui-react\";\nimport { Link } from 'react-router-dom'\n\n\nconst axios = require('axios')\n\n\nexport default function PlantCard(props) {\n    // console.log(props)\n\n    const [ state, setState ] = useState({ open: false })\n    const [ location, setLocation ] = useState()\n    console.log(location)\n\n    const handleInsertToDb = () => {\n        console.log('button clicked')\n        console.log(props.id)\n        \n        navigator.geolocation.getCurrentPosition(\n            (position) => {\n                console.log(position.coords)\n                const location = {\n                    lat:position.coords.latitude, \n                    lng:position.coords.longitude\n                }\n                axios.post('/api/plants', { \n                    props, location\n                })\n                setLocation({\n                    lat:position.coords.latitude, \n                    lng:position.coords.longitude\n                })\n            }\n\t\t)\n    \n    }\n\n    const show = () => setState({ open: true })\n    const handleConfirm = () => {\n        setState({ open: false })\n        handleInsertToDb()\n    }\n    const handleCancel = () => setState({ open: false })\n\n    return (\n        <section className=\"image-card\">\n            <div>\n                <h2>{props.result.plant_name}</h2>\n                <h5>Common Names:</h5>\n                <p>{props.result.plant_details.common_names === null \n                    ? \"No common names found\" \n                    : props.result.plant_details.common_names.join(', ')} </p>\n            </div>\n\n            <h5>Description:</h5>\n            <p> {props.result.plant_details.wiki_description === null ? \"This plant has no info\" : props.result.plant_details.wiki_description.value}</p>\n\n            <h5>Taxonomy</h5>\n            <p>Class: {props.result.plant_details.taxonomy.class} </p>\n            <p>Genus: {props.result.plant_details.structured_name.genus}</p>\n            <p>Species: {props.result.plant_details.structured_name.species}</p>\n\n            <h5>Match:</h5>\n            <p>{(props.result.probability * 100).toFixed(2)}% </p>\n            <h5>More images: </h5>\n            <section className=\"image-wrapper\">\n                <img src={props.result.similar_images[0].url} alt=\"\"/>\n                <img src={props.result.similar_images[1].url} alt=\"\"/>\n            </section>\n\n            {/* when the user list the marking grab the geo location */}\n            <footer>\n                <Button onClick={show}>Mark sighting</Button>\n                    <Confirm\n                        className=\"confirm-dialog\"\n                        open={state.open}\n                        cancelButton=\"no\"\n                        confirmButton=\"yes\"\n                        onCancel={handleCancel}\n                        onConfirm={handleConfirm}\n                    />\n            </footer>\n        </section>\n    )\n}","import './ImageSearch.css'\nimport { useState, useEffect } from 'react'\nimport ImageCard from './ImageCard.js'\n\nexport default function ImageSearch() {\n\n    // create a useState component to hold the file temp - not needed right tbh\n    // const [selectedFile, setSelectedFile] = useState(null)\n    // console.log(selectedFile)\n\n    // create a useState component to hold the results!\n    const [searchResults, setSearchResults] = useState()\n\n    const [message, setMessage] = useState('Hi there!');\n\n    useEffect(() => {\n        console.log('trigger use effect hook');\n\n        setTimeout(() => {\n        setMessage(\"Upload an image and I'll try ID it\");\n        }, 2000)\n\n    })\n    \n    const handleSendIdentification = () => {\n\n        console.log('click works!')\n        const files = [...document.querySelector('input[type=file]').files]\n        const promises = files.map((file) => {\n            return new Promise((resolve, reject) => {\n                const reader = new FileReader();\n                reader.onload = (event) => {\n                    const res = event.target.result;\n                    // console.log(res);\n                    resolve(res)\n                }\n                reader.readAsDataURL(file)\n            })\n        })\n        console.log('promises made...')\n\n        Promise.all(promises).then((base64files) => {\n            // console.log(base64files)\n            const data = {\n                images: base64files,\n                }\n            fetch('/api/image-search', { // this is where the client send the data to your server which makes the post req to the api\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data), // this is the envelope that contains the body\n            }) \n            .then(response => response.json()) \n            .then(data => { //this is where the data comes back to the client\n                // console.log('Success:', data)\n                // console.log(data)\n                const results = data.suggestions\n                // console.log(results)\n\n                // save the results to use then as a value in you component\n                setSearchResults(results)\n\n            })\n            .catch((error) => {\n                console.error('Error:', error)\n                })\n        })\n    }\n\n    // console.log(searchResults)\n\n    // remove search function once you diplay the results\n    return (\n\n        <section className=\"image-search\">\n            {message}\n            <form className=\"image-search-form\">\n            <div>\n                <input type=\"file\"/>\n                <button className=\"search-btn\" type=\"button\" onClick={handleSendIdentification} >search</button>\n            </div>\n            </form>\n            <h5> {searchResults === undefined ? \"\" : `Showing ${searchResults.length} matches`}  </h5>\n\n            {/* INDIVIDUAL PLANT COMPONENTS */}\n            {/* show number of results searchResults.length  */}\n\n            {/* if the the array is undefined display \"please wait\" else display the items */}\n            {searchResults === undefined \n            ? \"\"\n            : searchResults.map((result, idx) => ( <ImageCard className=\"card\" result={result} id={idx} key={idx}/> ))\n            }\n        </section>\n    )\n}","import { Component } from 'react';\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport { InfoWindow } from \"google-maps-react\";\n\nconst axios = require('axios')\n\nexport class MapContainer extends Component {\n\n    // use state to hold the markers array of objects\n    state = {\n        markers: [], \n        showingInfoWindow: false,\n        activeMarker: {},\n        selectedName: '',\n        selectedImg: '',\n        selectedDescription: '',\n    }\n\n    // making axious call on mount /page load\n    componentDidMount = () => {\n        \n        axios.get('/plants', {\n        }).then(response => {// get back the params as a response\n            // console.log(response)\n            let results = response.data\n            // console.log(results.lat, results.lng, results.plant_name, results.image_url)\n\n            this.setState({\n                markers: results\n            })\n\n            console.log(this.state.markers)\n\n        }) // set the state with the response so you can work with it\n        .catch((error) => {\n            console.error('Error:', error)\n        })\n\n    }\n\n    // transforming marker array of objects into componenet to display on the map\n    displayMarkers = () => {\n        return this.state.markers.map((marker) => {\n    \n            return  <Marker \n                        onClick={this.onMarkerClick}\n                        key={marker.id} \n                        plant={marker.plant_name}\n                        description={marker.description}\n                        url={marker.image_url}\n                        id={marker.id} \n                        position={{ lat: marker.lat, lng: marker.lng}}      \n                    />\n            })\n    }\n    \n    onMarkerClick = (props, marker, id) => {\n        console.log(id)\n        this.setState({\n            selectedName: props.plant,\n            selectedImg: props.url,\n            selectedDescription: props.description,\n            activeMarker: marker,\n            showingInfoWindow: true\n        })\n        console.log(this.state)\n    }\n    \n    render() {\n\n        const style = {\n            width: '80%',\n            height: '75%',\n            margin: '5% 10%',\n        }\n        const imgStyle = {\n            width: '35%',\n        }\n\n        const { selectedName, selectedImg, selectedDescription } = this.state\n        \n        console.log(selectedName)\n\n        return (\n          <Map\n              google={this.props.google}\n              zoom={6}\n              style={style}\n              initialCenter={{ lat: -33.949501, lng: 151.243698 }}\n          >\n            {this.displayMarkers()}\n\n            <InfoWindow\n                marker={this.state.activeMarker}\n                visible={this.state.showingInfoWindow}\n            >\n                <div>\n                    <h3>{selectedName}</h3>\n                    <p>{selectedDescription}</p>\n                    <img src={selectedImg} style={imgStyle} alt={selectedName}/>\n                </div>\n          </InfoWindow>\n        \n         </Map>\n        );\n   }\n}\n\nexport default GoogleApiWrapper({\n  apiKey:process.env.REACT_APP_MAPS_API_KEY\n})(MapContainer)\n","import React, { useState } from \"react\";\nimport \"./SlideUp.css\";\nimport ExpandLessRoundedIcon from '@material-ui/icons/ExpandLessRounded';\n\nexport default function SlideUp() {\n  const [displayModal, setDisplayModal] = useState(false);\n\n  return (\n    <div className=\"slideUpPanel\">\n\n      {/* modal with button */}\n      <div className={`modal ${displayModal ? \"show\" : \"\"}`} onClick={() => setDisplayModal(!displayModal)}> \n        \n        <div><ExpandLessRoundedIcon /></div>\n\n        <div className=\"text\">\n          <p>Some dummy text about the about and the search and something else</p>\n        </div>\n\n      </div>\n      <div\n        className={`overlay ${displayModal ? \"show\" : \"\"}`}\n        onClick={() => setDisplayModal(!displayModal)}\n      />\n\n    </div>\n  );\n}\n\n// const rootElement = document.getElementById(\"root\");\n// ReactDOM.render(<SlideUp />, rootElement);\n","import './PlantCard.css'\n\nexport default function PlantCard(props) {\n    console.log(props)\n    return (\n        <section className=\"plant-card\">\n            <h2>{props.results.plant_name}</h2>\n            <h5>Common Names:</h5>\n            <p>\n                {props.results.common_name.join(', ')} \n            </p>\n\n            <h5>Description:</h5>\n            <p> {props.results.description === null ? \"This plant has no info\" : props.results.description}</p>\n\n            <h5>Taxonomy</h5>\n            <p>Class: {props.results.class} </p>\n            <p>Genus: {props.results.genus}</p>\n            <p>Species: {props.results.species}</p>\n            <h5>More images: </h5>\n            <section className=\"image-wrapper\">\n                <img src={props.results.image_url} alt=\"\"/>\n            </section>\n\n        </section>\n    )\n}","import './PlantSearch.css'\nimport { useState, useEffect } from 'react'\nimport PlantCard from './PlantCard.js'\nconst axios = require('axios')\n//  include the Keyword Extractor\nconst keyword_extractor = require(\"keyword-extractor\");\n\n// this is doing a direct inout search with isn't very good. refactor it to pul all the data dn then process it client side you you can do more natural  queries\n\nexport default function PlantSearch() {\n\n    // create a useState component to hold the input\n    const [input, setInput] = useState('')\n    const [dbResults, setDbResults] = useState([])\n    const [matches, setMatches] = useState('')\n    const [message, setMessage] = useState('Hi there!');\n    const keywords = []\n\n    useEffect(() => {\n        console.log('trigger use effect hook');\n\n        setTimeout(() => {\n        setMessage(\"Search for a plant and I'll see if we have it\");\n        }, 2000)\n\n        axios.get('/api/plants', {})\n        .then(response => {\n            // get back the params as a response\n            let results = response.data\n            setDbResults(results)\n        }) // set the state with the response so you can work with it\n        .catch((error) => {\n            console.error('Error:', error)\n        })\n\n    },[])\n    // this is the list of dependencies - as an array\n    // empty array means it'll only happen once\n    // if you wnat tit to change on trigger of other functions... add them here\n\n\n    const handleInput = e => {\n        e.preventDefault()\n        setInput({content: e.target.value})\n        // console.log(input)\n    }\n\n    const handleQuery = e => {\n\n        console.log(input)\n        \n        //  Extract the keywords\n        const extraction_result =\n        keyword_extractor.extract(input.content,{\n            language:\"english\",\n            remove_digits: true,\n            return_changed_case:true,\n            remove_duplicates: false\n\n        });\n\n        console.log(extraction_result)\n\n        // let keywords = []\n\n        dbResults.forEach((dbresult) => {\n            let plantDesciption = dbresult.description.toLowerCase()\n\n            if (new RegExp(extraction_result.join(\"|\")).test(plantDesciption)) {\n                console.log(dbresult.id)\n                keywords.push(dbresult)\n            }\n        })\n\n        setMatches(keywords)\n    }\n\n    console.log(matches.length)\n\n    return (\n\n        <section className=\"plant-search\">\n            {message}\n            <div>\n                <form className=\"plant-search-form\">\n                    <input type=\"text\" onChange={handleInput} cols=\"35\" rows=\"5\"/> \n                    <button className=\"search-btn\" type=\"button\" onClick={handleQuery}>search</button>\n                </form>\n\n            </div>\n                <section>\n                    <h5>{matches.length === 0 ? \"\" : `Showing ${matches.length} matches` }</h5>\n\n                    {matches.length === 0 \n                    ? \"\" \n                    : matches.map((match, idx) => ( <PlantCard results={match} id={match.id} key={idx}/> ))}\n\n\n                </section>\n        </section>\n    )\n}","import { Switch, Route } from 'react-router-dom'\nimport './App.css';\nimport Nav from './Nav.js'\nimport ImageSearch from './ImageSearch.js'\nimport MapContainer from './MapContainer.js'\nimport SlideUp from './SlideUp.js'\nimport PlantSearch from './PlantSearch';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <Nav /> {/* nav - search text search upload nav holds the icons and switch below fakes the routes*/}\n      <Switch>\n        \n        <Route path=\"/image-search\">\n          <ImageSearch />\n        </Route>\n        <Route exact path=\"/\">\n          <MapContainer />\n        </Route>\n        <Route exact path=\"/plant-search\">\n          <PlantSearch />\n        </Route>\n\n      </Switch>\n      {/* MAP */}\n      {/* ImageSearch - pull out and in nav once your setting up you browser routes */}\n      {/* <Search /> */}\n\n      {/* menu links and app switches routes */}\n      <SlideUp />\n    </div>\n  );\n\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n\n      <Router>\n        <App />\n      </Router>\n      \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}